#!/usr/bin/env python3

import sys
import re

# 'READ', 'ON', 'ONBRK', 'ONERR', 'ATTR', 'DIM', 'FOR', 'PRINT', 'IF', 'NEXT', 'INPUT',

keywords = [
	'ATTR', 'AUDIO', 'BACKUP', 'CIRCLE', 'CLEAR', 'CLOAD', 'CLOSE', 'CLS', 'CMP', 'COLOR', 'CONT', 'COPY', 'CSAVE', 'DATA',
	'DEF', 'DIM', 'DIR', 'DLOAD', 'DOS', 'DRAW', 'DRIVE', 'DSKI$', 'DSKINI', 'DSKO$', 'END', 'EXEC', 'EXP', 'FIELD', 'FILES',
	'FOR', 'GET', 'GO', 'GOSUB', 'GOTO', 'HBUFF', 'HCIRCLE', 'HCLS', 'HCOLOR', 'HDRAW', 'HGET', 'HLINE', 'HPAINT', 'HPRINT',
	'HPUT', 'HRESET', 'HSCREEN', 'HSET', 'HSTAT', 'IF', 'INPUT', 'KILL', 'LET', 'LINE', 'LOAD', 'LOADM', 'LOCATE', 'LPOKE',
	'LSET', 'MERGE', 'MOTOR', 'NEW', 'NEXT', 'ON', 'ONBRK', 'ONERR', 'OPEN', 'PAINT', 'PALETTE', 'PCLEAR', 'PCLS', 'PCOPY',
	'PLAY', 'PMODE', 'POKE', 'PRESET', 'PRINT', 'PSET', 'PUT', 'READ', 'RENAME', 'RESET', 'RESTORE', 'RETURN', 'RGB', 'RSET',
	'SCREEN', 'SET', 'SKIPF', 'SOUND', 'STEP', 'STOP', 'TROFF', 'TRON', 'UNLOAD', 'USING', 'VERIFY', 'WIDTH', 'WRITE'
]

def minify(text):
	arr = text.strip().split('"')
	for i, item in enumerate(arr):
		if not i % 2:
			# not inside quotes
			s = item.upper().strip()		# upper case, strip leading and trailing whitespace
			s = re.sub(r'([^A-Z])\s+', r'\1', s)	# eliminate whitespace after constants and operators
			s = re.sub(r'\s+([^A-Z])', r'\1', s)	# eliminate whitespace before constants and operators
			arr[i] = s
			if "'" in arr[i]:
				# remove ' comments
				j = i + 1
				del arr[j:]
				arr[i] = arr[i].split("'")[0].strip()
			if re.match(r'^REM.+$', arr[i]):
				# remove REM comments
				j = i + 1
				del arr[j:]
				arr[i] = ''
	r = '"'.join(arr)
	m = re.search(r'[A-Z]', r, re.I)			# find keyword
	if m is not None:
		c = r[m.start()]
		for keyword in keywords:
			if keyword[0] == c:
				r = re.sub(r'(^\d*' + keyword + ') ', r'\1', r) # eliminate whitespace after keywords
	return r

def optimize(text):

	r = re.sub(r' ?:?ELSE:?', r' ELSE', text)	# strip trailing colon after ELSE
	r = re.sub(r' ?:?THEN:?', r' THEN', r)		# strip trailing colon after THEN
	if len(r) > 0 and r[0] == ":":
		value = r[1:]				# strip leading colon
	if len(r) > 0 and r[-1] == ":":
		r = r[:-1]				# strip trailing colon
	r = re.sub(r'IF1 THEN', r'', r)			# optimize "while 1" loop
	return r

# read BASIC file
linelist = sys.stdin.read().split('\n')

# process INCLUDEs
i = 0
for line in linelist:
	i = i + 1
	line = minify(line.strip())
	if line.startswith("INCLUDE"):
		filename = line[7:].strip().replace('"', '')
		inslist = open(filename, "r").readlines()
		linelist[i-1:i] = inslist
	line = minify(line.strip())

# process BASIC lines
lines = ""
linenum = 0
data = ""
inwhile = 0
for line in linelist:

	line = minify(line)

	# WHILE
	if re.match("^.*\d*.*WHILE.+$", line):
		inwhile = linenum + 1
		line = line.replace("WHILE", "IF", 1)
		line = str(linenum + 1) + line
		line = minify(line);
	# DATA
	if line.startswith("DATA"):
		data = data + ',' + minify(line[4:])
	# END IF
	elif line.endswith("ENDIF"): 
		line = line[:-6]
		if len(lines) > 0:
			if len(line) > 0 and line[0].isdigit():
				# line with line number
				linenum = int(re.findall(r'^\D*(\d+)', line)[0])
				print(optimize(lines))
				print(optimize(line))
			else:
				# line without line number
				print(optimize(lines + ":" + line))
		lines = ""
	# END WHILE
	elif line.endswith("ENDWHILE"): 
		line = line[:-9]
		lines = lines + ":GOTO" + str(inwhile)
		inwhile = 0
		if len(lines) > 0:
			if len(line) > 0 and line[0].isdigit():
				# line with line number
				linenum = int(re.findall(r'^\D*(\d+)', line)[0])
				print(optimize(lines))
				print(optimize(line))
			else:
				# line without line number
				print(optimize(lines + ":" + line))
		lines = ""
	elif len(line) > 0:
		if line[0].isdigit():
			# line with line number
			linenum = int(re.findall(r'^\D*(\d+)', line)[0])
			if len(lines) > 0:
				print(optimize(lines))
			lines = line
		else:
			# line without line number
			if len(lines) == 0:
				# generate line number
				linenum = linenum + 1
				lines = str(linenum) + line
			else:
				# concatenate line
				if len(lines) > 200:
					print(optimize(lines))
					linenum = linenum + 1
					lines = str(linenum) + line
				else:
					lines = lines + ":" + line

# finish up
if len(lines) > 0:
	print(optimize(lines))
if len(data) > 0:
	data = data[1:]
	arr = data.split(',')
	data = ""
	for i, item in enumerate(arr):
		data = data + ',' + item
		if len(data) > 200:
			linenum = linenum + 1
			print(str(linenum) + 'DATA' + data[1:])
			data = ""
	if len(data) > 0:
		linenum = linenum + 1
		print(str(linenum) + 'DATA' + data[1:])
